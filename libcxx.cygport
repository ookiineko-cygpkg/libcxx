CYGCMAKE_GENERATOR="Ninja"
inherit clang cmake

NAME="libcxx"
VERSION=15.0.7
RELEASE=1
CATEGORY="Devel"
SUMMARY="C++ standard library for Clang"
DESCRIPTION="Clang is an LLVM native C/C++/ObjC compiler, which aims to deliver
amazingly fast compiles, extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang Static
Analyzer is a tool that automatically finds bugs in your code, and is a great
example of the sort of tool that can be built using the Clang frontend as a
library to parse C/C++ code."
HOMEPAGE="http://clang.llvm.org/"
SRC_URI="
  https://github.com/llvm/llvm-project/releases/download/llvmorg-${PN}/${P}.src.tar.xz
  https://github.com/llvm/llvm-project/releases/download/llvmorg-${PV}/cmake-${PV}.src.tar.xz
"
SRC_DIR="libcxx-${VERSION}.src"
PATCH_URI="
	https://src.fedoraproject.org/rpms/${PN}/raw/f37/f/0001-Use-interface-library-for-${PN}-abi-shared.patch
	5.0.1-cygming-dllexport.patch
	7.0.1-cygwin-config.patch
	5.0.1-cygwin-flags.patch
	9.0.1-cygwin-nodefaultlibs.patch
	11.0.0-weak-dllexport.patch
	14.0.5-newlib-regex_word.patch
	14.0.5-cygwin-dllexport.patch
	14.0.5-newlib-ctype-char-cast.patch
	15.0.7-cygwin-pthread-constinit.patch
	15.0.7-cygwin-config.patch
"
RESTRICT="debuginfo strip"

PKG_NAMES="libc++1 libc++-devel"
libc__1_CONTENTS="usr/bin/cygc++-1.dll usr/share/doc/${NAME}"
libc___devel_REQUIRES="libc++abi-devel"
libc___devel_CONTENTS="usr/include/c++/v1/ usr/include/libcxx-internal/ usr/lib/libc++*"

DIFF_EXCLUDES="bad_symlink"

CYGPORT_USE_UNSTABLE_API=1
src_unpack_hook() {
    mv ../cmake{-${PV}.src,}
}

src_compile() {
	LDFLAGS+=" -Wl,--export-all-symbols"

	# The location of this header changed.
	if [[ -f /usr/include/cxxabi.h ]]; then
		local LIBCXX_ABI_PATH=/usr/include
	else
		local LIBCXX_ABI_PATH=/usr/include/c++/v1
	fi

	mkdir -p ${B}/shared
	cd ${B}/shared
	cygcmake -DLIBCXX_CXX_ABI=system-libcxxabi \
		 -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${LIBCXX_ABI_PATH} \
		 -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=OFF \
		 -DLIBCXX_ENABLE_SHARED=ON \
		 -DLIBCXX_ENABLE_STATIC=OFF \
		 -DLIBCXX_USE_COMPILER_RT=ON \
		 -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
		 -DLIBCXX_HAS_PTHREAD_API=ON \
		 -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \
		 -DLIBCXX_STANDALONE_BUILD=ON \
		 -DLIBCXX_INCLUDE_BENCHMARKS=OFF
	cygninja
	mkdir -p ${B}/static
	cd ${B}/static
	cygcmake -DLIBCXX_CXX_ABI=system-libcxxabi \
		 -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${LIBCXX_ABI_PATH} \
		 -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=OFF \
		 -DLIBCXX_ENABLE_SHARED=OFF \
		 -DLIBCXX_ENABLE_STATIC=ON \
		 -DLIBCXX_USE_COMPILER_RT=ON \
		 -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
		 -DLIBCXX_HAS_PTHREAD_API=ON \
		 -DLLVM_CONFIG_PATH=/usr/bin/llvm-config \
		 -DLIBCXX_STANDALONE_BUILD=ON \
		 -DLIBCXX_INCLUDE_BENCHMARKS=OFF
	cygninja
}

src_install() {
	# Manually link libc++.a against libc++abi.a, because the libcxx build system is currently
	# broken when system-libcxxabi is used.
	pushd ${B}
	ar cqT tmp.a `find static -name libc++.a` /usr/lib/libc++abi.a
	ar -M << EOM
CREATE tmp.a
ADDLIB tmp.a
SAVE
END
EOM
	mv tmp.a libc++.a
	ranlib libc++.a
	popd
	install -D -m 0644 ${B}/libc++.a ${D}/usr/lib/libc++.a
	rm -f ${B}/libc++.a

	cd ${B}/shared
	ninja_install

	dodoc ${S}/*.TXT

	# Install header files that libcxxabi needs
	mkdir ${D}/usr/include/libcxx-internal/
	install -m 0644 ${S}/src/include/*.h ${D}/usr/include/libcxx-internal/
}
